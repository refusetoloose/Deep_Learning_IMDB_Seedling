# -*- coding: utf-8 -*-
"""language_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tDmJ6wFwx3dfGwcXHUBzY0W2gnQHoqOH
"""

from google.colab import drive
drive.mount('/content/drive')

from fastai.text.all import *

path = "/content/drive/My Drive/Praj"

# create TextLMDataBunch using the csv in path, (TextClasDataBunch is a part of fastai V1 which is now no longer supported so I am using TextDataLoaders as its part of fastai V2.)
#     remember to specify the text column
data_lm = TextDataLoaders.from_csv(path, 'train.csv', text_col='review', is_lm=True, bs=64)

# create TextClasDataBunch using the csv in path, (TextClasDataBunch is a part of fastai V1 which is now no longer supported so I am using TextDataLoaders as its part of fastai V2.)
#     remember to specify the text/label column
#     specify test dataset, vocab, and bs
data_clas = TextDataLoaders.from_csv(path, 'train.csv', text_col='review', label_col='sentiment', valid='test.csv', text_vocab=data_lm.vocab, bs=32)

# create language model learner with AWD_LSTM architecture and drop_mult of 0.5
lm_learner = language_model_learner(data_lm, AWD_LSTM, drop_mult=0.5, metrics=[Perplexity()])

# find a learing rate
lm_learner.lr_find()

# fit one cycle
lm_learner.fit_one_cycle(5, 0.007585775572806597)

# save the encoder
lm_learner.show_results()
lm_learner.save_encoder('model')

lm_learner.predict("this movie talks about Canadian", n_words=20)

lm_learner.predict("I am from India", n_words=25)

clas_learner = text_classifier_learner(data_clas, arch=AWD_LSTM, drop_mult=0.5, metrics=accuracy)
clas_learner.load_encoder('model')

clas_learner.lr_find()

# tune the text_classifier_learner to accpetable accuracy (>80%)
clas_learner.fine_tune(5, base_lr=0.005248074419796467, freeze_epochs=1)

clas_learner.show_results()

clas_learner.predict("This is a horrible movie.")

clas_learner.predict("This is a great movie,")

# Check the label mapping
# suppose it returns {'negative': 0, 'positive': 1}
data_clas.train.vocab

import pandas as pd


df = pd.read_csv(path+"/test.csv")
y_true = tensor(df["sentiment"]=="positive")

from fastai.interpret import ClassificationInterpretation
interp = ClassificationInterpretation.from_learner(clas_learner, ds_idx=1)
interp.y_true = tensor(df["sentiment"]=="positive")
interp.plot_confusion_matrix()

# Calculate accuracy (based on confusion matrix)
accuracy_value = np.diag(interp.confusion_matrix()).sum() / interp.confusion_matrix().sum()
print(f"Accuracy: {accuracy_value}")

# Calculate accuracy (based on prediction and targets)
preds, interp.y_true = clas_learner.get_preds(dl=data_clas.valid)
print(f"Accuracy: {accuracy(preds, interp.y_true)}")